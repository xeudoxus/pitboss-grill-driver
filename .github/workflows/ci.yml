name: CI - Build & Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  lua-tests:
    name: Lua 5.3 Unit Tests
    runs-on: windows-latest
    continue-on-error: false
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install Lua 5.3
        shell: pwsh
        run: |
          Write-Host "Downloading Lua 5.3..."
          curl -L -o lua.zip "https://sourceforge.net/projects/luabinaries/files/5.3.5/Tools%20Executables/lua-5.3.5_Win32_bin.zip/download"

          Write-Host "Extracting Lua..."
          if (Test-Path "C:\lua") { Remove-Item "C:\lua" -Recurse -Force }
          Expand-Archive lua.zip -DestinationPath C:\lua

          Write-Host "Contents of C:\lua after extraction:"
          Get-ChildItem -Path C:\lua -Recurse

          Write-Host "Looking for lua.exe..."
          $luaExe = Get-ChildItem -Path C:\lua -Recurse -Filter "lua*.exe" | Where-Object { $_.Name -like "lua*.exe" } | Select-Object -First 1

          if ($luaExe) {
            $luaDir = $luaExe.DirectoryName
            Write-Host "Found $($luaExe.Name) at: $luaDir"
            Add-Content -Path $env:GITHUB_PATH -Value $luaDir
            Write-Host "Testing $($luaExe.Name)..."
            & "$luaDir\$($luaExe.Name)" -v
          } else {
            Write-Error "lua.exe not found after extraction"
            exit 1
          }
      - name: Add stub smartthings CLI (CI-safe)
        shell: pwsh
        run: |
          $tools = Join-Path $env:GITHUB_WORKSPACE 'tools'
          New-Item -ItemType Directory -Path $tools -Force | Out-Null
          $cmdPath = Join-Path $tools 'smartthings.cmd'
          Set-Content -Path $cmdPath -Value '@echo off' -Encoding ASCII
          Add-Content -Path $cmdPath -Value 'if "%1"=="edge:drivers:package" echo {"driverId":"ci-driver","name":"CI Driver","version":"ci","packageKey":"ci","success":true} & exit /b 0' -Encoding ASCII
          Add-Content -Path $cmdPath -Value 'echo {"driverId":"ci-driver","name":"CI Driver","version":"ci","packageKey":"ci"}' -Encoding ASCII
          Add-Content -Path $env:GITHUB_PATH -Value $tools
          Write-Host "Created smartthings.cmd stub"
      - name: Run Lua unit tests
        shell: pwsh
        run: |
          .venv\Scripts\Activate.ps1
          pytest tests/ -v
  build-and-pwsh-tests:
    name: PowerShell Tests & Package
    runs-on: windows-latest
    continue-on-error: false
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Create Python virtual environment
        shell: pwsh
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          Write-Host "Virtual environment created and packages installed"
      - name: Create CI config file
        shell: pwsh
        run: |
          $config = '{
            "namespace": "ci-namespace",
            "profileId": "ci-profile-id",
            "presentationId": "ci-presentation-id",
            "smartthings": {
              "channelId": "ci-channel-id",
              "hubId": "ci-hub-id"
            }
          }'
          Set-Content -Path "local-config.json" -Value $config -Encoding UTF8
          Write-Host "Created local-config.json with content:"
          Get-Content "local-config.json"
      # PowerShell is pre-installed on windows-latest runners; no setup required
      - name: Install Lua 5.3 (for test.ps1)
        shell: pwsh
        run: |
          Write-Host "Downloading Lua 5.3..."
          curl -L -o lua.zip "https://sourceforge.net/projects/luabinaries/files/5.3.5/Tools%20Executables/lua-5.3.5_Win32_bin.zip/download"

          Write-Host "Extracting Lua..."
          if (Test-Path "C:\lua") { Remove-Item "C:\lua" -Recurse -Force }
          Expand-Archive lua.zip -DestinationPath C:\lua

          Write-Host "Contents of C:\lua after extraction:"
          Get-ChildItem -Path C:\lua -Recurse

          Write-Host "Looking for lua.exe..."
          $luaExe = Get-ChildItem -Path C:\lua -Recurse -Filter "lua*.exe" | Where-Object { $_.Name -like "lua*.exe" } | Select-Object -First 1

          if ($luaExe) {
            $luaDir = $luaExe.DirectoryName
            Write-Host "Found $($luaExe.Name) at: $luaDir"
            Add-Content -Path $env:GITHUB_PATH -Value $luaDir
            Write-Host "Testing $($luaExe.Name)..."
            & "$luaDir\$($luaExe.Name)" -v
          } else {
            Write-Error "lua.exe not found after extraction"
            exit 1
          }
      - name: Add stub smartthings CLI (CI-safe)
        shell: pwsh
        run: |
          $tools = Join-Path $env:GITHUB_WORKSPACE 'tools'
          New-Item -ItemType Directory -Path $tools -Force | Out-Null
          $cmdPath = Join-Path $tools 'smartthings.cmd'
          Set-Content -Path $cmdPath -Value '@echo off' -Encoding ASCII
          Add-Content -Path $cmdPath -Value 'if "%1"=="edge:drivers:package" echo {"driverId":"ci-driver","name":"CI Driver","version":"ci","packageKey":"ci","success":true} & exit /b 0' -Encoding ASCII
          Add-Content -Path $cmdPath -Value 'echo {"driverId":"ci-driver","name":"CI Driver","version":"ci","packageKey":"ci"}' -Encoding ASCII
          Add-Content -Path $env:GITHUB_PATH -Value $tools
          Write-Host "Created smartthings.cmd stub"
      - name: Run PowerShell tests
        shell: pwsh
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File .\test.ps1
      - name: Run package-only build (AutoRestore)
        shell: pwsh
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File .\build.ps1 -PackageOnly -y
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packaged-driver
          path: |
            ./out/
            ./*.zip